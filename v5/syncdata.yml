---
name: syncdata

on:
  push:
    paths:
      - 'updates/data.json'
  workflow_dispatch: # Enable manual triggering

permissions:
  contents: write
  issues: write # Required for creating issues in case of failure

jobs:
  syncdata:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.MYSHELF }}
          fetch-depth: 0

      # Step 2: Set up Git with PAT
      - name: Set up Git with PAT
        run: |
          git config user.name "Lyra[bot]"
          git config user.email "lyra@myshelf.ai"
          git remote set-url origin https://x-access-token:${{ secrets.MYSHELF }}@github.com/${{ github.repository }}.git

       # Step 3: Validate JSON File using validate_json.py
      - name: Validate JSON File
        run: |
          if [ "$DRYRUN" = "true" ]; then
            echo "Dry Run mode enabled. Skipping JSON validation."
          else
            python validate_json.py
          fi

 # Step 4: Apply Template if Missing Required Keys
      - name: Apply Template
        run: |
          if [ "$DRYRUN" = "true" ]; then
            echo "Dry Run mode enabled. Skipping template application."
          else
            python apply_template.py
          fi

      # Step 5: Commit and Push Changes to the Main Branch
      - name: Commit and Push Changes
        run: |
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          git add data.json
          git commit -m "Sync data.json from updates/data.json on $TIMESTAMP"
          git push origin main

      # Step 6: Create GitHub Issue for Failure
      - name: Notify via GitHub Issues
        if: failure()
        uses: peter-evans/create-issue-from-file@v5
        with:
          title: "Syncdata Failure"
          content-filepath: ./syncdata-error-log.txt
          labels: bug

      # Step 7: Create GitHub Issue for Success
      - name: Notify Success via GitHub Issues
        if: success()
        run: |
          echo "### Syncdata Workflow Successful" > success-log.txt
          echo "" >> success-log.txt
          echo "**Workflow Completed Successfully**" >> success-log.txt
          echo "- Repository: ${{ github.repository }}" >> success-log.txt
          echo "- Workflow: ${{ github.workflow }}" >> success-log.txt
          echo "- Commit: ${{ github.sha }}" >> success-log.txt
          echo "- Timestamp: $(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> success-log.txt
        uses: peter-evans/create-issue-from-file@v5
        with:
          title: "Syncdata Workflow Successful"
          content-filepath: ./success-log.txt
          labels: success