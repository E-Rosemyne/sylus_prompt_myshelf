---
name: MyShelf Workflow Orchestrator

on:
  workflow_dispatch:
    inputs:
      module:
        description: "Select the module to run: all, core, mini, or cache."
        required: true
        default: "all"

permissions:
  contents: write
  issues: write
  actions: write

# you will need to go retrieve the associated Workflow IDs from the workflows using APIs available by GitHub. ChatGPT can help with the appropriate command

env:
  CORE_GRAPH_WORKFLOW_ID: "#########"
  MINI_GRAPHS_WORKFLOW_ID: "#########"
  CACHE_GRAPH_WORKFLOW_ID: "#########"

jobs:
  core_graph_workflow:
    runs-on: ubuntu-latest
    if: ${{ inputs.module == 'all' || inputs.module == 'core' }}
    steps:
      - name: Set up GitHub CLI
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Trigger Core Graph Workflow
        run: |
          echo "Triggering Core Graph Workflow..."
          curl -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/actions/workflows/${{ env.CORE_GRAPH_WORKFLOW_ID }}/dispatches \
            -d '{"ref": "main", "inputs": {"reason": "Triggered by MyShelf Orchestrator"}}'

      - name: Poll Core Graph Workflow Status
        run: |
          echo "Polling Core Graph Workflow status..."
          POLL_INTERVAL=30
          MAX_RETRIES=10
          ATTEMPTS=0

          while [[ $ATTEMPTS -lt $MAX_RETRIES ]]; do
            echo "Checking Core Graph Workflow status (Attempt $((ATTEMPTS + 1)))..."
            RUN_ID=$(curl -s \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/actions/workflows/${{ env.CORE_GRAPH_WORKFLOW_ID }}/runs" | \
              jq -r '.workflow_runs[0].id')

            STATUS=$(curl -s \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/actions/runs/$RUN_ID" | \
              jq -r '.status')

            echo "Run ID: $RUN_ID, Status: $STATUS"

            if [[ $STATUS == "completed" ]]; then
              echo "Core Graph Workflow completed successfully."
              break
            elif [[ $STATUS == "failed" ]]; then
              echo "Core Graph Workflow failed. Exiting."
              exit 1
            else
              echo "Core Graph Workflow is still in progress. Retrying in $POLL_INTERVAL seconds..."
              sleep $POLL_INTERVAL
              POLL_INTERVAL=$((POLL_INTERVAL + 10))
              ATTEMPTS=$((ATTEMPTS + 1))
            fi
          done

          if [[ $ATTEMPTS -ge $MAX_RETRIES ]]; then
            echo "Core Graph Workflow did not complete within the allowed time. Exiting."
            exit 1
          fi

  mini_graphs_workflow:
    runs-on: ubuntu-latest
    needs: core_graph_workflow
    if: ${{ inputs.module == 'all' || inputs.module == 'mini' }}
    steps:
      - name: Trigger Mini Graphs Workflow
        run: |
          echo "Triggering Mini Graphs Workflow..."
          curl -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/actions/workflows/${{ env.MINI_GRAPHS_WORKFLOW_ID }}/dispatches \
            -d '{"ref": "main", "inputs": {"reason": "Triggered by MyShelf Orchestrator"}}'

      - name: Poll Mini Graphs Workflow Status
        run: |
          echo "Polling Mini Graphs Workflow status..."
          POLL_INTERVAL=30
          MAX_RETRIES=10
          ATTEMPTS=0

          while [[ $ATTEMPTS -lt $MAX_RETRIES ]]; do
            echo "Checking Mini Graphs Workflow status (Attempt $((ATTEMPTS + 1)))..."
            RUN_ID=$(curl -s \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/actions/workflows/${{ env.MINI_GRAPHS_WORKFLOW_ID }}/runs" | \
              jq -r '.workflow_runs[0].id')

            STATUS=$(curl -s \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/actions/runs/$RUN_ID" | \
              jq -r '.status')

            echo "Run ID: $RUN_ID, Status: $STATUS"

            if [[ $STATUS == "completed" ]]; then
              echo "Mini Graphs Workflow completed successfully."
              break
            elif [[ $STATUS == "failed" ]]; then
              echo "Mini Graphs Workflow failed. Exiting."
              exit 1
            else
              echo "Mini Graphs Workflow is still in progress. Retrying in $POLL_INTERVAL seconds..."
              sleep $POLL_INTERVAL
              POLL_INTERVAL=$((POLL_INTERVAL + 10))
              ATTEMPTS=$((ATTEMPTS + 1))
            fi
          done

          if [[ $ATTEMPTS -ge $MAX_RETRIES ]]; then
            echo "Mini Graphs Workflow did not complete within the allowed time. Exiting."
            exit 1
          fi

  cache_graph_workflow:
    runs-on: ubuntu-latest
    needs: mini_graphs_workflow
    if: ${{ inputs.module == 'all' || inputs.module == 'cache' }}
    steps:
      - name: Trigger Cache Graph Workflow
        run: |
          echo "Triggering Cache Graph Workflow..."
          curl -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/actions/workflows/${{ env.CACHE_GRAPH_WORKFLOW_ID }}/dispatches \
            -d '{"ref": "main", "inputs": {"reason": "Triggered by MyShelf Orchestrator"}}'

      - name: Poll Cache Graph Workflow Status
        run: |
          echo "Polling Cache Graph Workflow status..."
          POLL_INTERVAL=30
          MAX_RETRIES=10
          ATTEMPTS=0

          while [[ $ATTEMPTS -lt $MAX_RETRIES ]]; do
            echo "Checking Cache Graph Workflow status (Attempt $((ATTEMPTS + 1)))..."
            RUN_ID=$(curl -s \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/actions/workflows/${{ env.CACHE_GRAPH_WORKFLOW_ID }}/runs" | \
              jq -r '.workflow_runs[0].id')

            STATUS=$(curl -s \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/actions/runs/$RUN_ID" | \
              jq -r '.status')

            echo "Run ID: $RUN_ID, Status: $STATUS"

            if [[ $STATUS == "completed" ]]; then
              echo "Cache Graph Workflow completed successfully."
              break
            elif [[ $STATUS == "failed" ]]; then
              echo "Cache Graph Workflow failed. Exiting."
              exit 1
            else
              echo "Cache Graph Workflow is still in progress. Retrying in $POLL_INTERVAL seconds..."
              sleep $POLL_INTERVAL
              POLL_INTERVAL=$((POLL_INTERVAL + 10))
              ATTEMPTS=$((ATTEMPTS + 1))
            fi
          done

          if [[ $ATTEMPTS -ge $MAX_RETRIES ]]; then
            echo "Cache Graph Workflow did not complete within the allowed time. Exiting."
            exit 1
          fi
